<?xml version="1.0" encoding="utf-8"?>
<Objects xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="SourceGenerator SourceGenerator.xsd">
  <TokenInterfaces>
    <TokenInterface>
      <Name>IBinaryOperatorToken</Name>
    </TokenInterface>
    <TokenInterface>
      <Name>IUnaryOperatorToken</Name>
    </TokenInterface>
    <TokenInterface>
      <Name>IVarDeclKindToken</Name>
    </TokenInterface>
    <TokenInterface>
      <Name>IPouKindToken</Name>
    </TokenInterface>
    <TokenInterface>
      <Name>ILiteralToken</Name>
    </TokenInterface>
    <TokenInterface>
      <Name>IParameterKindToken</Name>
    </TokenInterface>
    <TokenInterface>
      <Name>IParenthesisedOperatorToken</Name>
    </TokenInterface>
    <TokenInterface>
      <Name>IBuiltInTypeToken</Name>
    </TokenInterface>
  </TokenInterfaces>
  <TokenClasses>
    <!--Token without value-->
    <TokenWithoutValueClass>
      <Name>CommaToken</Name>
      <Generating>,</Generating>
    </TokenWithoutValueClass>
    <TokenWithoutValueClass>
      <Name>AssignToken</Name>
      <Generating>:=</Generating>
      <Interface>IParameterKindToken</Interface>
    </TokenWithoutValueClass>
    <TokenWithoutValueClass>
      <Name>DerefToken</Name>
      <Generating>^</Generating>
    </TokenWithoutValueClass>
    <TokenWithoutValueClass>
      <Name>EqualToken</Name>
      <Generating>=</Generating>
      <Interface>IBinaryOperatorToken</Interface>
    </TokenWithoutValueClass>
    <TokenWithoutValueClass>
      <Name>LessEqualToken</Name>
      <Generating>&lt;=</Generating>
      <Interface>IBinaryOperatorToken</Interface>
    </TokenWithoutValueClass>
    <TokenWithoutValueClass>
      <Name>LessToken</Name>
      <Generating>&lt;</Generating>
      <Interface>IBinaryOperatorToken</Interface>
    </TokenWithoutValueClass>
    <TokenWithoutValueClass>
      <Name>GreaterToken</Name>
      <Generating>&gt;</Generating>
      <Interface>IBinaryOperatorToken</Interface>
    </TokenWithoutValueClass>
    <TokenWithoutValueClass>
      <Name>GreaterEqualToken</Name>
      <Generating>&gt;=</Generating>
      <Interface>IBinaryOperatorToken</Interface>
    </TokenWithoutValueClass>
    <TokenWithoutValueClass>
      <Name>UnEqualToken</Name>
      <Generating>&lt;&gt;</Generating>
      <Interface>IBinaryOperatorToken</Interface>
    </TokenWithoutValueClass>
    <TokenWithoutValueClass>
      <Name>DoubleArrowToken</Name>
      <Generating>=&gt;</Generating>
      <Interface>IParameterKindToken</Interface>
    </TokenWithoutValueClass>
    <TokenWithoutValueClass>
      <Name>DotToken</Name>
      <Generating>.</Generating>
    </TokenWithoutValueClass>
    <TokenWithoutValueClass>
      <Name>SemicolonToken</Name>
      <Generating>;</Generating>
    </TokenWithoutValueClass>
    <TokenWithoutValueClass>
      <Name>DotsToken</Name>
      <Generating>..</Generating>
    </TokenWithoutValueClass>
    <TokenWithoutValueClass>
      <Name>ColonToken</Name>
      <Generating>:</Generating>
    </TokenWithoutValueClass>
    <TokenWithoutValueClass>
      <Name>PlusToken</Name>
      <Generating>+</Generating>
      <Interface>IBinaryOperatorToken</Interface>
    </TokenWithoutValueClass>
    <TokenWithoutValueClass>
      <Name>MinusToken</Name>
      <Generating>-</Generating>
      <Interface>IUnaryOperatorToken</Interface>
      <Interface>IBinaryOperatorToken</Interface>
    </TokenWithoutValueClass>
    <TokenWithoutValueClass>
      <Name>StarToken</Name>
      <Generating>*</Generating>
      <Interface>IBinaryOperatorToken</Interface>
    </TokenWithoutValueClass>
    <TokenWithoutValueClass>
      <Name>SlashToken</Name>
      <Generating>/</Generating>
      <Interface>IBinaryOperatorToken</Interface>
    </TokenWithoutValueClass>
    <TokenWithoutValueClass>
      <Name>PowerToken</Name>
      <Generating>**</Generating>
      <Interface>IBinaryOperatorToken</Interface>
    </TokenWithoutValueClass>
    <TokenWithoutValueClass>
      <Name>EndToken</Name>
      <Generating></Generating>
    </TokenWithoutValueClass>
    <!--Alls kinds of parenthesis-->
    <TokenWithoutValueClass>
      <Name>ParenthesisOpenToken</Name>
      <Generating>(</Generating>
    </TokenWithoutValueClass>
    <TokenWithoutValueClass>
      <Name>ParenthesisCloseToken</Name>
      <Generating>)</Generating>
    </TokenWithoutValueClass>
    <TokenWithoutValueClass>
      <Name>BracketOpenToken</Name>
      <Generating>[</Generating>
    </TokenWithoutValueClass>
    <TokenWithoutValueClass>
      <Name>BracketCloseToken</Name>
      <Generating>]</Generating>
    </TokenWithoutValueClass>
    <TokenKeywordClass>
      <Name>VarToken</Name>
      <Generating>VAR</Generating>
      <Interface>IVarDeclKindToken</Interface>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>EndVarToken</Name>
      <Generating>END_VAR</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>VarInputToken</Name>
      <Generating>VAR_INPUT</Generating>
      <Interface>IVarDeclKindToken</Interface>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>VarGlobalToken</Name>
      <Generating>VAR_GLOBAL</Generating>
      <Interface>IVarDeclKindToken</Interface>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>VarOutToken</Name>
      <Generating>VAR_OUTPUT</Generating>
      <Interface>IVarDeclKindToken</Interface>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>VarInOutToken</Name>
      <Generating>VAR_IN_OUT</Generating>
      <Interface>IVarDeclKindToken</Interface>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>VarTempToken</Name>
      <Generating>VAR_TEMP</Generating>
      <Interface>IVarDeclKindToken</Interface>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>ProgramToken</Name>
      <Generating>PROGRAM</Generating>
      <Interface>IPouKindToken</Interface>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>FunctionToken</Name>
      <Generating>FUNCTION</Generating>
      <Interface>IPouKindToken</Interface>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>FunctionBlockToken</Name>
      <Generating>FUNCTION_BLOCK</Generating>
      <Interface>IPouKindToken</Interface>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>MethodToken</Name>
      <Generating>METHOD</Generating>
      <Interface>IPouKindToken</Interface>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>PointerToken</Name>
      <Generating>POINTER</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>ArrayToken</Name>
      <Generating>ARRAY</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>StringToken</Name>
      <Generating>STRING</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>OfToken</Name>
      <Generating>OF</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>IfToken</Name>
      <Generating>IF</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>ThenToken</Name>
      <Generating>THEN</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>EndIfToken</Name>
      <Generating>END_IF</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>ElsifToken</Name>
      <Generating>ELSIF</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>ElseToken</Name>
      <Generating>ELSE</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>WhileToken</Name>
      <Generating>WHILE</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>EndWhileToken</Name>
      <Generating>END_WHILE</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>RepeatToken</Name>
      <Generating>REPEAT</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>UntilToken</Name>
      <Generating>UNTIL</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>EndRepeatToken</Name>
      <Generating>END_REPEAT</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>ExitToken</Name>
      <Generating>EXIT</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>ContinueToken</Name>
      <Generating>CONTINUE</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>ReturnToken</Name>
      <Generating>RETURN</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>ForToken</Name>
      <Generating>FOR</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>ToToken</Name>
      <Generating>TO</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>ByToken</Name>
      <Generating>BY</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>EndForToken</Name>
      <Generating>END_FOR</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>DoToken</Name>
      <Generating>DO</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>CaseToken</Name>
      <Generating>CASE</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>EndCaseToken</Name>
      <Generating>END_CASE</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>AndToken</Name>
      <Generating>AND</Generating>
      <Interface>IBinaryOperatorToken</Interface>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>XorToken</Name>
      <Generating>XOR</Generating>
      <Interface>IBinaryOperatorToken</Interface>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>OrToken</Name>
      <Generating>OR</Generating>
      <Interface>IBinaryOperatorToken</Interface>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>NotToken</Name>
      <Generating>NOT</Generating>
      <Interface>IUnaryOperatorToken</Interface>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>ConstantToken</Name>
      <Generating>CONSTANT</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>SizeOfToken</Name>
      <Generating>SIZEOF</Generating>
      <Interface>IParenthesisedOperatorToken</Interface>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>AdrToken</Name>
      <Generating>ADR</Generating>
      <Interface>IParenthesisedOperatorToken</Interface>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>TypeToken</Name>
      <Generating>TYPE</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>EndTypeToken</Name>
      <Generating>END_TYPE</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>StructToken</Name>
      <Generating>STRUCT</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>EndStructToken</Name>
      <Generating>END_STRUCT</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>UnionToken</Name>
      <Generating>UNION</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>EndUnionToken</Name>
      <Generating>END_UNION</Generating>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>ModToken</Name>
      <Generating>MOD</Generating>
      <Interface>IBinaryOperatorToken</Interface>
    </TokenKeywordClass>
    <TokenKeywordClass>
      <Name>TrueToken</Name>
      <Generating>TRUE</Generating>
      <Interface>ILiteralToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>FalseToken</Name>
      <Generating>FALSE</Generating>
      <Interface>ILiteralToken</Interface>
    </TokenKeywordClass> 
    <!--BuiltInTypes--> 
    <TokenKeywordClass>
      <Name>CharToken</Name>
      <Generating>CHAR</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>LRealToken</Name>
      <Generating>LREAL</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>RealToken</Name>
      <Generating>REAL</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>LIntToken</Name>
      <Generating>LINT</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>DIntToken</Name>
      <Generating>DINT</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>IntToken</Name>
      <Generating>INT</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>SIntToken</Name>
      <Generating>SINT</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>ULIntToken</Name>
      <Generating>ULINT</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>UDIntToken</Name>
      <Generating>UDINT</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>UIntToken</Name>
      <Generating>UINT</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>USIntToken</Name>
      <Generating>USINT</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>LWordToken</Name>
      <Generating>LWORD</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>DWordToken</Name>
      <Generating>DWORD</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>WordToken</Name>
      <Generating>WORD</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>ByteToken</Name>
      <Generating>BYTE</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>BoolToken</Name>
      <Generating>BOOL</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>LTimeToken</Name>
      <Generating>LTIME</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>TimeToken</Name>
      <Generating>TIME</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>LDTToken</Name>
      <Generating>LDT</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>DTToken</Name>
      <Generating>DT</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>LDateToken</Name>
      <Generating>LDATE</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>DateToken</Name>
      <Generating>DATE</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>LTODToken</Name>
      <Generating>LTOD</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <TokenKeywordClass>
      <Name>TODToken</Name>
      <Generating>TOD</Generating>
      <Interface>IBuiltInTypeToken</Interface>
    </TokenKeywordClass> 
    <!--Simple token with value-->
    <TokenWithValueClass>
      <Name>IdentifierToken</Name>
      <ValueType>string</ValueType>
      <DefaultValue>"__ERROR__"</DefaultValue>
    </TokenWithValueClass>
    <TokenWithValueClass>
      <Name>UnknownToken</Name>
      <ValueType>string</ValueType>
    </TokenWithValueClass>
    <TokenWithValueClass>
      <Name>WhitespaceToken</Name>
      <ValueType>string</ValueType>
      <DefaultValue>""</DefaultValue>
    </TokenWithValueClass>
    <TokenWithValueClass>
      <Name>CommentToken</Name>
      <ValueType>string</ValueType>
    </TokenWithValueClass>
    <TokenWithValueClass>
      <Name>AttributeToken</Name>
      <ValueType>string</ValueType>
      <DefaultValue>""</DefaultValue>
    </TokenWithValueClass>
    <!--Literals-->
    <TokenWithValueClass>
      <Name>TypedLiteralToken</Name>
      <ValueType>TypedLiteral</ValueType>
      <Interface>ILiteralToken</Interface>
    </TokenWithValueClass>
    <TokenWithValueClass>
      <Name>BooleanLiteralToken</Name>
      <ValueType>bool</ValueType>
      <Interface>ILiteralToken</Interface>
      <DefaultValue>default</DefaultValue>
    </TokenWithValueClass>
    <TokenWithValueClass>
      <Name>IntegerLiteralToken</Name>
      <ValueType>OverflowingInteger</ValueType>
      <Interface>ILiteralToken</Interface>
      <DefaultValue>default</DefaultValue>
    </TokenWithValueClass>
    <TokenWithValueClass>
      <Name>RealLiteralToken</Name>
      <ValueType>OverflowingReal</ValueType>
      <Interface>ILiteralToken</Interface>
      <DefaultValue>default</DefaultValue>
    </TokenWithValueClass>
    <TokenWithValueClass>
      <Name>SingleByteStringLiteralToken</Name>
      <ValueType>string</ValueType>
      <Interface>ILiteralToken</Interface>
      <DefaultValue>""</DefaultValue>
    </TokenWithValueClass>
    <TokenWithValueClass>
      <Name>MultiByteStringLiteralToken</Name>
      <ValueType>string</ValueType>
      <Interface>ILiteralToken</Interface>
      <DefaultValue>""</DefaultValue>
    </TokenWithValueClass>
    <TokenWithValueClass>
      <Name>DateLiteralToken</Name>
      <ValueType>OverflowingDate</ValueType>
      <Interface>ILiteralToken</Interface>
      <DefaultValue>default</DefaultValue>
    </TokenWithValueClass>
    <TokenWithValueClass>
      <Name>DurationLiteralToken</Name>
      <ValueType>OverflowingDuration</ValueType>
      <Interface>ILiteralToken</Interface>
      <DefaultValue>default</DefaultValue>
    </TokenWithValueClass>
    <TokenWithValueClass>
      <Name>DateAndTimeLiteralToken</Name>
      <ValueType>OverflowingDateAndTime</ValueType>
      <Interface>ILiteralToken</Interface>
      <DefaultValue>default</DefaultValue>
    </TokenWithValueClass>
  </TokenClasses>
  <SyntaxInterfaces>
    <SyntaxInterface>
      <Name>ITypeSyntax</Name>
    </SyntaxInterface>
    <SyntaxInterface>
      <Name>IExpressionSyntax</Name>
    </SyntaxInterface>
    <SyntaxInterface>
      <Name>IStatementSyntax</Name>
    </SyntaxInterface>
    <SyntaxInterface>
      <Name>ITypeDeclarationBodySyntax</Name>
    </SyntaxInterface>
  </SyntaxInterfaces>
  <SyntaxClasses>
    <SyntaxClass>
      <Name>PouInterfaceSyntax</Name>
      <Element>
        <Name>TokenAttribute</Name>
        <Kind>Nullable</Kind>
        <Type>AttributeToken</Type>
      </Element>
      <Element>
        <Name>TokenPouKind</Name>
        <Type>IPouKindToken</Type>
      </Element>
      <Element>
        <Name>TokenName</Name>
        <Type>IdentifierToken</Type>
      </Element>
      <Element>
        <Name>ReturnDeclaration</Name>
        <Kind>Nullable</Kind>
        <Type>ReturnDeclSyntax</Type>
      </Element>
      <Element>
        <Name>VariableDeclarations</Name>
        <Kind>Array</Kind>
        <Type>VarDeclBlockSyntax</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>ReturnDeclSyntax</Name>
      <Element>
        <Name>TokenColon</Name>
        <Type>ColonToken</Type>
      </Element>
      <Element>
        <Name>Type</Name>
        <Type>ITypeSyntax</Type>
      </Element>
    </SyntaxClass>
    <!--VarDecl-->
    <SyntaxClass>
      <Name>VarDeclBlockSyntax</Name>
      <Element>
        <Name>TokenKind</Name>
        <Type>IVarDeclKindToken</Type>
      </Element>
      <Element>
        <Name>TokenConstant</Name>
        <Kind>Nullable</Kind>
        <Type>ConstantToken</Type>
      </Element>
      <Element>
        <Name>Declarations</Name>
        <Kind>Array</Kind>
        <Type>VarDeclSyntax</Type>
      </Element>
      <Element>
        <Name>TokenEndVar</Name>
        <Type>EndVarToken</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>VarDeclSyntax</Name>
      <Element>
        <Name>TokenAttribute</Name>
        <Kind>Nullable</Kind>
        <Type>AttributeToken</Type>
      </Element>
      <Element>
        <Name>TokenIdentifiers</Name>
        <Type>IdentifierToken</Type>
      </Element>
      <Element>
        <Name>TokenColon</Name>
        <Type>ColonToken</Type>
      </Element>
      <Element>
        <Name>Type</Name>
        <Type>ITypeSyntax</Type>
      </Element>
      <Element>
        <Name>Initial</Name>
        <Kind>Nullable</Kind>
        <Type>VarInitSyntax</Type>
      </Element>
      <Element>
        <Name>TokenSemicolon</Name>
        <Type>SemicolonToken</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>VarInitSyntax</Name>
      <Element>
        <Name>TokenAssign</Name>
        <Type>AssignToken</Type>
      </Element>
      <Element>
        <Name>Value</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
    </SyntaxClass>
    <!--Typesyntax-->
    <SyntaxClass>
      <Name>IdentifierTypeSyntax</Name>
      <Interface>ITypeSyntax</Interface>
      <Element>
        <Name>TokenIdentifier</Name>
        <Type>IdentifierToken</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>BuiltInTypeSyntax</Name>
      <Interface>ITypeSyntax</Interface>
      <Element>
        <Name>TokenType</Name>
        <Type>IBuiltInTypeToken</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>ArrayTypeSyntax</Name>
      <Interface>ITypeSyntax</Interface>
      <Element>
        <Name>TokenArray</Name>
        <Type>ArrayToken</Type>
      </Element>
      <Element>
        <Name>TokenBracketOpen</Name>
        <Type>BracketOpenToken</Type>
      </Element>
      <Element>
        <Name>Ranges</Name>
        <Kind>CommaSeparated</Kind>
        <Type>RangeSyntax</Type>
      </Element>
      <Element>
        <Name>TokenBracketClose</Name>
        <Type>BracketCloseToken</Type>
      </Element>
      <Element>
        <Name>TokenOf</Name>
        <Type>OfToken</Type>
      </Element>
      <Element>
        <Name>BaseType</Name>
        <Type>ITypeSyntax</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>RangeSyntax</Name>
      <Element>
        <Name>LowerBound</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
      <Element>
        <Name>TokenDots</Name>
        <Type>DotsToken</Type>
      </Element>
      <Element>
        <Name>UpperBound</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>PointerTypeSyntax</Name>
      <Interface>ITypeSyntax</Interface>
      <Element>
        <Name>TokenPointer</Name>
        <Type>PointerToken</Type>
      </Element>
      <Element>
        <Name>TokenTo</Name>
        <Type>ToToken</Type>
      </Element>
      <Element>
        <Name>BaseType</Name>
        <Type>ITypeSyntax</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>SubrangeTypeSyntax</Name>
      <Interface>ITypeSyntax</Interface>
      <Element>
        <Name>BaseType</Name>
        <Type>ITypeSyntax</Type>
      </Element>
      <Element>
        <Name>TokenParenthesisOpen</Name>
        <Type>ParenthesisOpenToken</Type>
      </Element>
      <Element>
        <Name>Range</Name>
        <Type>RangeSyntax</Type>
      </Element>
      <Element>
        <Name>TokenParenthesisClose</Name>
        <Type>ParenthesisCloseToken</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>StringTypeSyntax</Name>
      <Interface>ITypeSyntax</Interface>
      <Element>
        <Name>TokenString</Name>
        <Type>StringToken</Type>
      </Element>
      <Element>
        <Name>Size</Name>
        <Kind>Nullable</Kind>
        <Type>StringSizeSyntax</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>StringSizeSyntax</Name>
      <Element>
        <Name>TokenParenthesisOpen</Name>
        <Type>ParenthesisOpenToken</Type>
      </Element>
      <Element>
        <Name>Size</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
      <Element>
        <Name>TokenParenthesisClose</Name>
        <Type>ParenthesisCloseToken</Type>
      </Element>
    </SyntaxClass>
    <!--Expressions-->
    <SyntaxClass>
      <Name>LiteralExpressionSyntax</Name>
      <Interface>IExpressionSyntax</Interface>
      <Element>
        <Name>TokenValue</Name>
        <Type>ILiteralToken</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>BinaryOperatorExpressionSyntax</Name>
      <Interface>IExpressionSyntax</Interface>
      <Element>
        <Name>Left</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
      <Element>
        <Name>TokenOperator</Name>
        <Type>IBinaryOperatorToken</Type>
      </Element>
      <Element>
        <Name>Right</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>UnaryOperatorExpressionSyntax</Name>
      <Interface>IExpressionSyntax</Interface>
      <Element>
        <Name>TokenOperator</Name>
        <Type>IUnaryOperatorToken</Type>
      </Element>
      <Element>
        <Name>Value</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>ParenthesisedExpressionSyntax</Name>
      <Interface>IExpressionSyntax</Interface>
      <Element>
        <Name>TokenParenthesisOpen</Name>
        <Type>ParenthesisOpenToken</Type>
      </Element>
      <Element>
        <Name>Value</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
      <Element>
        <Name>TokenParenthesisClose</Name>
        <Type>ParenthesisCloseToken</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>VariableExpressionSyntax</Name>
      <Interface>IExpressionSyntax</Interface>
      <Element>
        <Name>TokenIdentifier</Name>
        <Type>IdentifierToken</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>CompoAccessExpressionSyntax</Name>
      <Interface>IExpressionSyntax</Interface>
      <Element>
        <Name>LeftSide</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
      <Element>
        <Name>TokenIdentifier</Name>
        <Type>IdentifierToken</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>DerefExpressionSyntax</Name>
      <Interface>IExpressionSyntax</Interface>
      <Element>
        <Name>LeftSide</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
      <Element>
        <Name>TokenDeref</Name>
        <Type>DerefToken</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>IndexAccessExpressionSyntax</Name>
      <Interface>IExpressionSyntax</Interface>
      <Element>
        <Name>LeftSide</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
      <Element>
        <Name>TokenBracketOpen</Name>
        <Type>BracketOpenToken</Type>
      </Element>
      <Element>
        <Name>Indices</Name>
        <Kind>CommaSeparated</Kind>
        <Type>IExpressionSyntax</Type>
      </Element>
      <Element>
        <Name>TokenBracketClose</Name>
        <Type>BracketCloseToken</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>ParenthesisedOperatorSyntax</Name>
      <Interface>IExpressionSyntax</Interface>
      <Element>
        <Name>TokenParenthesisedOperator</Name>
        <Type>IParenthesisedOperatorToken</Type>
      </Element>
      <Element>
        <Name>TokenParenthesisOpen</Name>
        <Type>ParenthesisOpenToken</Type>
      </Element>
      <Element>
        <Name>Arguments</Name>
        <Kind>CommaSeparated</Kind>
        <Type>IExpressionSyntax</Type>
      </Element>
      <Element>
        <Name>TokenParenthesisClose</Name>
        <Type>ParenthesisCloseToken</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>CallExpressionSyntax</Name>
      <Interface>IExpressionSyntax</Interface>
      <Element>
        <Name>Callee</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
      <Element>
        <Name>TokenParenthesisOpen</Name>
        <Type>ParenthesisOpenToken</Type>
      </Element>
      <Element>
        <Name>Arguments</Name>
        <Kind>CommaSeparated</Kind>
        <Type>CallArgumentSyntax</Type>
      </Element>
      <Element>
        <Name>TokenParenthesisClose</Name>
        <Type>ParenthesisCloseToken</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>CallArgumentSyntax</Name>
      <Element>
        <Name>ExplicitParameter</Name>
        <Kind>Nullable</Kind>
        <Type>ExplicitCallParameterSyntax</Type>
      </Element>
      <Element>
        <Name>Value</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>ExplicitCallParameterSyntax</Name>
      <Element>
        <Name>TokenIdentifier</Name>
        <Type>IdentifierToken</Type>
      </Element>
      <Element>
        <Name>ParameterKind</Name>
        <Type>IParameterKindToken</Type>
      </Element>
    </SyntaxClass>
    <!--Statements-->
    <SyntaxClass>
      <Name>SequenceStatement</Name>
      <Interface>IStatementSyntax</Interface>
      <Element>
        <Name>Statements</Name>
        <Kind>Array</Kind>
        <Type>IStatementSyntax</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>AssignStatementSyntax</Name>
      <Interface>IStatementSyntax</Interface>
      <Element>
        <Name>Left</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
      <Element>
        <Name>TokenAssign</Name>
        <Type>AssignToken</Type>
      </Element>
      <Element>
        <Name>Right</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
      <Element>
        <Name>TokenSemicolon</Name>
        <Type>SemicolonToken</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>ExpressionStatementSyntax</Name>
      <Interface>IStatementSyntax</Interface>
      <Element>
        <Name>Expression</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
      <Element>
        <Name>TokenSemicolon</Name>
        <Type>SemicolonToken</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>IfStatementSyntax</Name>
      <Interface>IStatementSyntax</Interface>
      <Element>
        <Name>IfBranch</Name>
        <Type>IfBranchSyntax</Type>
      </Element>
      <Element>
        <Name>ElsIfBranches</Name>
        <Kind>Array</Kind>
        <Type>ElsifBranchSyntax</Type>
      </Element>
      <Element>
        <Name>ElseBranch</Name>
        <Kind>Nullable</Kind>
        <Type>ElseBranchSyntax</Type>
      </Element>
      <Element>
        <Name>TokenEndIf</Name>
        <Type>EndIfToken</Type>
      </Element>
      <Element>
        <Name>TokenSemicolon</Name>
        <Type>SemicolonToken</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>ElsifBranchSyntax</Name>
      <Element>
        <Name>TokenElsif</Name>
        <Type>ElsifToken</Type>
      </Element>
      <Element>
        <Name>Condition</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
      <Element>
        <Name>TokenThen</Name>
        <Type>ThenToken</Type>
      </Element>
      <Element>
        <Name>Statements</Name>
        <Type>StatementList</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>ElseBranchSyntax</Name>
      <Element>
        <Name>TokenElse</Name>
        <Type>ElseToken</Type>
      </Element>
      <Element>
        <Name>Statements</Name>
        <Type>StatementList</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>IfBranchSyntax</Name>
      <Element>
        <Name>TokenIf</Name>
        <Type>IfToken</Type>
      </Element>
      <Element>
        <Name>Condition</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
      <Element>
        <Name>TokenThen</Name>
        <Type>ThenToken</Type>
      </Element>
      <Element>
        <Name>Statements</Name>
        <Type>StatementList</Type>
      </Element>
    </SyntaxClass> 
    <SyntaxClass>
      <Name>ReturnStatementSyntax</Name>
      <Interface>IStatementSyntax</Interface>
      <Element>
        <Name>TokenReturn</Name>
        <Type>ReturnToken</Type>
      </Element>
      <Element>
        <Name>TokenSemicolon</Name>
        <Type>SemicolonToken</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>ExitStatementSyntax</Name>
      <Interface>IStatementSyntax</Interface>
      <Element>
        <Name>TokenExit</Name>
        <Type>ExitToken</Type>
      </Element>
      <Element>
        <Name>TokenSemicolon</Name>
        <Type>SemicolonToken</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>ContinueStatementSyntax</Name>
      <Interface>IStatementSyntax</Interface>
      <Element>
        <Name>TokenContinue</Name>
        <Type>ContinueToken</Type>
      </Element>
      <Element>
        <Name>TokenSemicolon</Name>
        <Type>SemicolonToken</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>WhileStatementSyntax</Name>
      <Interface>IStatementSyntax</Interface>
      <Element>
        <Name>TokenWhile</Name>
        <Type>WhileToken</Type>
      </Element>
      <Element>
        <Name>Condition</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
      <Element>
        <Name>TokenDo</Name>
        <Type>DoToken</Type>
      </Element>
      <Element>
        <Name>Statements</Name>
        <Type>StatementList</Type>
      </Element>
      <Element>
        <Name>TokenEndWhile</Name>
        <Type>EndWhileToken</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>ForStatementSyntax</Name>
      <Interface>IStatementSyntax</Interface>
      <Element>
        <Name>TokenFor</Name>
        <Type>ForToken</Type>
      </Element>
      <Element>
        <Name>IndexVariable</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
      <Element>
        <Name>TokenAssign</Name>
        <Type>AssignToken</Type>
      </Element>
      <Element>
        <Name>InitialValue</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
      <Element>
        <Name>TokenTo</Name>
        <Type>ToToken</Type>
      </Element>
      <Element>
        <Name>UpperBound</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
      <Element>
        <Name>ByClause</Name>
        <Kind>Nullable</Kind>
        <Type>ForByClauseSyntax</Type>
      </Element>
      <Element>
        <Name>TokenDo</Name>
        <Type>DoToken</Type>
      </Element>
      <Element>
        <Name>Statements</Name>
        <Type>StatementList</Type>
      </Element>
      <Element>
        <Name>TokenEndFor</Name>
        <Type>EndForToken</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>ForByClauseSyntax</Name>
      <Element>
        <Name>TokenBy</Name>
        <Type>ByToken</Type>
      </Element>
      <Element>
        <Name>StepSize</Name>
        <Type>IExpressionSyntax</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>StatementList</Name>
      <Interface>IStatementSyntax</Interface>
      <Element>
        <Name>Statements</Name>
        <Kind>Array</Kind>
        <Type>IStatementSyntax</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>EmptyStatement</Name>
      <Interface>IStatementSyntax</Interface>
      <Element>
        <Name>TokenSemicolon</Name>
        <Type>SemicolonToken</Type>
      </Element>
    </SyntaxClass>
    <!--User defined type-->
    <SyntaxClass>
      <Name>TypeDeclarationSyntax</Name>
      <Element>
        <Name>TokenAttribute</Name>
        <Kind>Nullable</Kind>
        <Type>AttributeToken</Type>
      </Element>
      <Element>
        <Name>TokenType</Name>
        <Type>TypeToken</Type>
      </Element>
      <Element>
        <Name>TokenIdentifier</Name>
        <Type>IdentifierToken</Type>
      </Element>
      <Element>
        <Name>TokenColon</Name>
        <Type>ColonToken</Type>
      </Element>
      <Element>
        <Name>TypeBody</Name>
        <Type>ITypeDeclarationBodySyntax</Type>
      </Element>
      <Element>
        <Name>TokenSemicolon</Name>
        <Type>SemicolonToken</Type>
      </Element>
      <Element>
        <Name>TokenEndType</Name>
        <Type>EndTypeToken</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>AliasTypeDeclarationBodySyntax</Name>
      <Interface>ITypeDeclarationBodySyntax</Interface>
      <Element>
        <Name>BaseType</Name>
        <Type>ITypeSyntax</Type>
      </Element>
      <Element>
        <Name>Initial</Name>
        <Kind>Nullable</Kind>
        <Type>VarInitSyntax</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>StructTypeDeclarationBodySyntax</Name>
      <Interface>ITypeDeclarationBodySyntax</Interface>
      <Element>
        <Name>TokenStruct</Name>
        <Type>StructToken</Type>
      </Element>
      <Element>
        <Name>Fields</Name>
        <Kind>Array</Kind>
        <Type>VarDeclSyntax</Type>
      </Element>
      <Element>
        <Name>TokenEndStruct</Name>
        <Type>EndStructToken</Type>
      </Element>
      <Element>
        <Name>Initial</Name>
        <Kind>Nullable</Kind>
        <Type>VarInitSyntax</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>UnionTypeDeclarationBodySyntax</Name>
      <Interface>ITypeDeclarationBodySyntax</Interface>
      <Element>
        <Name>TokenUnion</Name>
        <Type>UnionToken</Type>
      </Element>
      <Element>
        <Name>Fields</Name>
        <Kind>Array</Kind>
        <Type>VarDeclSyntax</Type>
      </Element>
      <Element>
        <Name>TokenEndUnion</Name>
        <Type>EndUnionToken</Type>
      </Element>
      <Element>
        <Name>Initial</Name>
        <Kind>Nullable</Kind>
        <Type>VarInitSyntax</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>EnumTypeDeclarationBodySyntax</Name>
      <Interface>ITypeDeclarationBodySyntax</Interface>
      <Element>
        <Name>EnumBaseType</Name>
        <Kind>Nullable</Kind>
        <Type>ITypeSyntax</Type>
      </Element>
      <Element>
        <Name>TokenParenthesisOpen</Name>
        <Type>ParenthesisOpenToken</Type>
      </Element>
      <Element>
        <Name>Values</Name>
        <Kind>CommaSeparated</Kind>
        <Type>EnumValueDeclarationSyntax</Type>
      </Element>
      <Element>
        <Name>TokenParenthesisClose</Name>
        <Type>ParenthesisCloseToken</Type>
      </Element>
      <Element>
        <Name>Initial</Name>
        <Kind>Nullable</Kind>
        <Type>VarInitSyntax</Type>
      </Element>
    </SyntaxClass>
    <SyntaxClass>
      <Name>EnumValueDeclarationSyntax</Name>
      <Element>
        <Name>TokenIdentifier</Name>
        <Type>IdentifierToken</Type>
      </Element>
      <Element>
        <Name>Value</Name>
        <Kind>Nullable</Kind>
        <Type>VarInitSyntax</Type>
      </Element>
    </SyntaxClass>
  </SyntaxClasses>
</Objects>
