Language-features:
	Do not invoke constant folding for non-compiling expressions.
	Do not generate casts for binary operations that contain a literal.
		DINT + 1 -> DINT + DINT#1
		For literals perform partial typification. i.e. 1 becomes ANY_INT_AT_LEAST_SINT, etc.
		All otherexpressions are typed with the expression typifier.
		Then perform type inference for the generics.
		Then make sure everything is typified.
	Add SIZE_T Alias
	Arrays use SIZE_T for indicices
	SIZEOF returns SIZE_T
	Add CASE statement
	Add constant condition handling to flow analysis
	Add call output var decls.
	Add safe ENUMs
	Strings
	Dynamic Arrays&Strings
	Add Exception System
		- Catch-Expression-With-Catch: TRY <assign of call|call> CATCH
			- Has Type bool
		- Try-Expression-With-Rethrow: TRY <call> THROW
			- Has Type of <call>
	Durations
		Add casts:
			TIME->LTIME
		Add scalar operations:
			(L)TIME * ANY_NUM -> (L)TIME
			(L)TIME / ANY_NUM -> (L)TIME
			(L)TIME / (L)TIME -> (L)REAL
			(L)TIME MOD (L)TIME -> (L)TIME

VsCode:
	DAP-Implementation
		Create debug features:
			Breakpoints
				Add breakpoints for initial values.
				Add breakpoints for for loop.
			Monitoring:
				Allow to read expressions.
				Allow to write expressions
	LSP-Implementation

CodeGenIR:

Compiler-features:
	Store scopes with symbols:
		The scope contains only variables with differing names.
		The scope is used with symbol sets to ensure uniqueness.
	Add find expression at source span
	Add find bound expression at source span
	Simple incremental compile
	Add bound node types for symbols, this would give a working space for the multiple compile-phases and allow a details lookup.
	LateLanguageUpdates

	More Boundnodes:
		Boundnode for FOR-Loop-Vardecl.
		Boundnode for Qualified-Variable.
		Boundnode for Qualified-Type.

	Syntaxlowering:
		Make bound nodes able to be generated by hand.

